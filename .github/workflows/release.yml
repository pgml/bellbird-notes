name: Release

on:
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        type: choice
        required: true
        default: 'minor'
        options:
          - major
          - minor

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag
        run: |
          latest=$(git describe --tags $(git rev-list --tags --max-count=1) || echo "v0.00")

          if ! [[ $latest =~ ^v?[0-9]+\.[0-9]{2,3}$ ]]; then
            echo "Error: Tag format is invalid. Expected format: vX.XX"
            exit 1
          fi

          echo "Latest tag: $latest"
          echo "latest=$latest" >> $GITHUB_ENV

      - name: Check for changes since last release
        run: |
          if [ "${{ env.latest }}" != "v0.00" ]; then
            if [ -z "$(git diff --name-only ${{ env.latest }})" ]; then
              echo "No changes detected since last release"
              exit 1
            fi
          fi

      - name: Calculate next version
        run: |
          latest="${latest:-v0.00}"

          version="${latest#v}"
          IFS='.' read -r major minor <<< "$version"

          echo "Previous: major=$major, minor=$minor"

          if [[ "${{ github.event.inputs.version_bump }}" == "major" ]]; then
            major=$((major + 1))
            minor=0
          else
            minor=$((10#$minor + 1)) # avoid octal
          fi

          new_minor=$(printf "%02d" "$minor")
          new_tag="v$major.$new_minor"

          echo "New version: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_ENV
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create and Push Tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ env.new_tag }} -a -m "Release ${{ env.new_tag }}"
          git push origin ${{ env.new_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable

      - name: Install GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
